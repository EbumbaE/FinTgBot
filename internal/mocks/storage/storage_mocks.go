// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	diary "gitlab.ozon.dev/ivan.hom.200/telegram-bot/internal/model/diary"
)

// MockDiaryDB is a mock of DiaryDB interface.
type MockDiaryDB struct {
	ctrl     *gomock.Controller
	recorder *MockDiaryDBMockRecorder
}

// MockDiaryDBMockRecorder is the mock recorder for MockDiaryDB.
type MockDiaryDBMockRecorder struct {
	mock *MockDiaryDB
}

// NewMockDiaryDB creates a new mock instance.
func NewMockDiaryDB(ctrl *gomock.Controller) *MockDiaryDB {
	mock := &MockDiaryDB{ctrl: ctrl}
	mock.recorder = &MockDiaryDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiaryDB) EXPECT() *MockDiaryDBMockRecorder {
	return m.recorder
}

// GetNote mocks base method.
func (m *MockDiaryDB) GetNote(id int64, date string) ([]diary.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", id, date)
	ret0, _ := ret[0].([]diary.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockDiaryDBMockRecorder) GetNote(id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockDiaryDB)(nil).GetNote), id, date)
}

// SetNote mocks base method.
func (m *MockDiaryDB) SetNote(id int64, date string, note diary.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNote", id, date, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNote indicates an expected call of SetNote.
func (mr *MockDiaryDBMockRecorder) SetNote(id, date, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNote", reflect.TypeOf((*MockDiaryDB)(nil).SetNote), id, date, note)
}

// MockCurrencyDB is a mock of CurrencyDB interface.
type MockCurrencyDB struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyDBMockRecorder
}

// MockCurrencyDBMockRecorder is the mock recorder for MockCurrencyDB.
type MockCurrencyDBMockRecorder struct {
	mock *MockCurrencyDB
}

// NewMockCurrencyDB creates a new mock instance.
func NewMockCurrencyDB(ctrl *gomock.Controller) *MockCurrencyDB {
	mock := &MockCurrencyDB{ctrl: ctrl}
	mock.recorder = &MockCurrencyDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyDB) EXPECT() *MockCurrencyDBMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockCurrencyDB) GetRate(abbreviation string) (diary.Valute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", abbreviation)
	ret0, _ := ret[0].(diary.Valute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockCurrencyDBMockRecorder) GetRate(abbreviation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockCurrencyDB)(nil).GetRate), abbreviation)
}

// GetUserAbbValute mocks base method.
func (m *MockCurrencyDB) GetUserAbbValute(userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAbbValute", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAbbValute indicates an expected call of GetUserAbbValute.
func (mr *MockCurrencyDBMockRecorder) GetUserAbbValute(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAbbValute", reflect.TypeOf((*MockCurrencyDB)(nil).GetUserAbbValute), userID)
}

// SetRate mocks base method.
func (m *MockCurrencyDB) SetRate(valute diary.Valute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRate", valute)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRate indicates an expected call of SetRate.
func (mr *MockCurrencyDBMockRecorder) SetRate(valute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRate", reflect.TypeOf((*MockCurrencyDB)(nil).SetRate), valute)
}

// SetUserAbbValute mocks base method.
func (m *MockCurrencyDB) SetUserAbbValute(userID int64, abbreviation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAbbValute", userID, abbreviation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserAbbValute indicates an expected call of SetUserAbbValute.
func (mr *MockCurrencyDBMockRecorder) SetUserAbbValute(userID, abbreviation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAbbValute", reflect.TypeOf((*MockCurrencyDB)(nil).SetUserAbbValute), userID, abbreviation)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetNote mocks base method.
func (m *MockStorage) GetNote(id int64, date string) ([]diary.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", id, date)
	ret0, _ := ret[0].([]diary.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockStorageMockRecorder) GetNote(id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockStorage)(nil).GetNote), id, date)
}

// GetRate mocks base method.
func (m *MockStorage) GetRate(abbreviation string) (diary.Valute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", abbreviation)
	ret0, _ := ret[0].(diary.Valute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockStorageMockRecorder) GetRate(abbreviation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockStorage)(nil).GetRate), abbreviation)
}

// GetUserAbbValute mocks base method.
func (m *MockStorage) GetUserAbbValute(userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAbbValute", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAbbValute indicates an expected call of GetUserAbbValute.
func (mr *MockStorageMockRecorder) GetUserAbbValute(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAbbValute", reflect.TypeOf((*MockStorage)(nil).GetUserAbbValute), userID)
}

// SetNote mocks base method.
func (m *MockStorage) SetNote(id int64, date string, note diary.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNote", id, date, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNote indicates an expected call of SetNote.
func (mr *MockStorageMockRecorder) SetNote(id, date, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNote", reflect.TypeOf((*MockStorage)(nil).SetNote), id, date, note)
}

// SetRate mocks base method.
func (m *MockStorage) SetRate(valute diary.Valute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRate", valute)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRate indicates an expected call of SetRate.
func (mr *MockStorageMockRecorder) SetRate(valute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRate", reflect.TypeOf((*MockStorage)(nil).SetRate), valute)
}

// SetUserAbbValute mocks base method.
func (m *MockStorage) SetUserAbbValute(userID int64, abbreviation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAbbValute", userID, abbreviation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserAbbValute indicates an expected call of SetUserAbbValute.
func (mr *MockStorageMockRecorder) SetUserAbbValute(userID, abbreviation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAbbValute", reflect.TypeOf((*MockStorage)(nil).SetUserAbbValute), userID, abbreviation)
}
