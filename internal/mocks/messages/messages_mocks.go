// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/incoming_msg.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messages "gitlab.ozon.dev/ivan.hom.200/telegram-bot/internal/model/messages"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), text, userID)
}

// MockCommander is a mock of Commander interface.
type MockCommander struct {
	ctrl     *gomock.Controller
	recorder *MockCommanderMockRecorder
}

// MockCommanderMockRecorder is the mock recorder for MockCommander.
type MockCommanderMockRecorder struct {
	mock *MockCommander
}

// NewMockCommander creates a new mock instance.
func NewMockCommander(ctrl *gomock.Controller) *MockCommander {
	mock := &MockCommander{ctrl: ctrl}
	mock.recorder = &MockCommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommander) EXPECT() *MockCommanderMockRecorder {
	return m.recorder
}

// CommandDefault mocks base method.
func (m *MockCommander) CommandDefault(msg *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandDefault", msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandDefault indicates an expected call of CommandDefault.
func (mr *MockCommanderMockRecorder) CommandDefault(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandDefault", reflect.TypeOf((*MockCommander)(nil).CommandDefault), msg)
}

// CommandGetStatistic mocks base method.
func (m *MockCommander) CommandGetStatistic(msg *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandGetStatistic", msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandGetStatistic indicates an expected call of CommandGetStatistic.
func (mr *MockCommanderMockRecorder) CommandGetStatistic(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandGetStatistic", reflect.TypeOf((*MockCommander)(nil).CommandGetStatistic), msg)
}

// CommandHelp mocks base method.
func (m *MockCommander) CommandHelp(msg *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandHelp", msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandHelp indicates an expected call of CommandHelp.
func (mr *MockCommanderMockRecorder) CommandHelp(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandHelp", reflect.TypeOf((*MockCommander)(nil).CommandHelp), msg)
}

// CommandSetNote mocks base method.
func (m *MockCommander) CommandSetNote(msg *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandSetNote", msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandSetNote indicates an expected call of CommandSetNote.
func (mr *MockCommanderMockRecorder) CommandSetNote(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandSetNote", reflect.TypeOf((*MockCommander)(nil).CommandSetNote), msg)
}

// CommandStart mocks base method.
func (m *MockCommander) CommandStart(msg *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandStart", msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandStart indicates an expected call of CommandStart.
func (mr *MockCommanderMockRecorder) CommandStart(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandStart", reflect.TypeOf((*MockCommander)(nil).CommandStart), msg)
}
