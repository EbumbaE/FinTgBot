// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/incoming_msg.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messages "gitlab.ozon.dev/ivan.hom.200/telegram-bot/internal/model/messages"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), text, userID)
}

// MockCommander is a mock of Commander interface.
type MockCommander struct {
	ctrl     *gomock.Controller
	recorder *MockCommanderMockRecorder
}

// MockCommanderMockRecorder is the mock recorder for MockCommander.
type MockCommanderMockRecorder struct {
	mock *MockCommander
}

// NewMockCommander creates a new mock instance.
func NewMockCommander(ctrl *gomock.Controller) *MockCommander {
	mock := &MockCommander{ctrl: ctrl}
	mock.recorder = &MockCommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommander) EXPECT() *MockCommanderMockRecorder {
	return m.recorder
}

// CommandHelp mocks base method.
func (m *MockCommander) CommandHelp(msg *messages.Message) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandHelp", msg)
	ret0, _ := ret[0].(string)
	return ret0
}

// CommandHelp indicates an expected call of CommandHelp.
func (mr *MockCommanderMockRecorder) CommandHelp(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandHelp", reflect.TypeOf((*MockCommander)(nil).CommandHelp), msg)
}

// СommandDefault mocks base method.
func (m *MockCommander) СommandDefault(msg *messages.Message) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "СommandDefault", msg)
	ret0, _ := ret[0].(string)
	return ret0
}

// СommandDefault indicates an expected call of СommandDefault.
func (mr *MockCommanderMockRecorder) СommandDefault(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "СommandDefault", reflect.TypeOf((*MockCommander)(nil).СommandDefault), msg)
}

// СommandGetStatistic mocks base method.
func (m *MockCommander) СommandGetStatistic(msg *messages.Message) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "СommandGetStatistic", msg)
	ret0, _ := ret[0].(string)
	return ret0
}

// СommandGetStatistic indicates an expected call of СommandGetStatistic.
func (mr *MockCommanderMockRecorder) СommandGetStatistic(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "СommandGetStatistic", reflect.TypeOf((*MockCommander)(nil).СommandGetStatistic), msg)
}

// СommandSetNote mocks base method.
func (m *MockCommander) СommandSetNote(msg *messages.Message) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "СommandSetNote", msg)
	ret0, _ := ret[0].(string)
	return ret0
}

// СommandSetNote indicates an expected call of СommandSetNote.
func (mr *MockCommanderMockRecorder) СommandSetNote(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "СommandSetNote", reflect.TypeOf((*MockCommander)(nil).СommandSetNote), msg)
}

// СommandStart mocks base method.
func (m *MockCommander) СommandStart(msg *messages.Message) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "СommandStart", msg)
	ret0, _ := ret[0].(string)
	return ret0
}

// СommandStart indicates an expected call of СommandStart.
func (mr *MockCommanderMockRecorder) СommandStart(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "СommandStart", reflect.TypeOf((*MockCommander)(nil).СommandStart), msg)
}
