// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	diary "gitlab.ozon.dev/ivan.hom.200/telegram-bot/internal/model/diary"
	report "gitlab.ozon.dev/ivan.hom.200/telegram-bot/internal/model/report"
)

// MockNotesDB is a mock of NotesDB interface.
type MockNotesDB struct {
	ctrl     *gomock.Controller
	recorder *MockNotesDBMockRecorder
}

// MockNotesDBMockRecorder is the mock recorder for MockNotesDB.
type MockNotesDBMockRecorder struct {
	mock *MockNotesDB
}

// NewMockNotesDB creates a new mock instance.
func NewMockNotesDB(ctrl *gomock.Controller) *MockNotesDB {
	mock := &MockNotesDB{ctrl: ctrl}
	mock.recorder = &MockNotesDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotesDB) EXPECT() *MockNotesDBMockRecorder {
	return m.recorder
}

// GetNote mocks base method.
func (m *MockNotesDB) GetNote(id int64, date string) ([]diary.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", id, date)
	ret0, _ := ret[0].([]diary.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockNotesDBMockRecorder) GetNote(id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockNotesDB)(nil).GetNote), id, date)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetNote mocks base method.
func (m *MockStorage) GetNote(id int64, date string) ([]diary.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", id, date)
	ret0, _ := ret[0].([]diary.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockStorageMockRecorder) GetNote(id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockStorage)(nil).GetNote), id, date)
}

// MockReportCache is a mock of ReportCache interface.
type MockReportCache struct {
	ctrl     *gomock.Controller
	recorder *MockReportCacheMockRecorder
}

// MockReportCacheMockRecorder is the mock recorder for MockReportCache.
type MockReportCacheMockRecorder struct {
	mock *MockReportCache
}

// NewMockReportCache creates a new mock instance.
func NewMockReportCache(ctrl *gomock.Controller) *MockReportCache {
	mock := &MockReportCache{ctrl: ctrl}
	mock.recorder = &MockReportCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportCache) EXPECT() *MockReportCacheMockRecorder {
	return m.recorder
}

// AddNoteInCacheReports mocks base method.
func (m *MockReportCache) AddNoteInCacheReports(userID int64, date time.Time, note diary.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNoteInCacheReports", userID, date, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNoteInCacheReports indicates an expected call of AddNoteInCacheReports.
func (mr *MockReportCacheMockRecorder) AddNoteInCacheReports(userID, date, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNoteInCacheReports", reflect.TypeOf((*MockReportCache)(nil).AddNoteInCacheReports), userID, date, note)
}

// AddReportInCache mocks base method.
func (m *MockReportCache) AddReportInCache(userID int64, period string, addedReport report.ReportFormat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReportInCache", userID, period, addedReport)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReportInCache indicates an expected call of AddReportInCache.
func (mr *MockReportCacheMockRecorder) AddReportInCache(userID, period, addedReport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReportInCache", reflect.TypeOf((*MockReportCache)(nil).AddReportInCache), userID, period, addedReport)
}

// GetReportFromCache mocks base method.
func (m *MockReportCache) GetReportFromCache(userID int64, period string) (report.ReportFormat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportFromCache", userID, period)
	ret0, _ := ret[0].(report.ReportFormat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportFromCache indicates an expected call of GetReportFromCache.
func (mr *MockReportCacheMockRecorder) GetReportFromCache(userID, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportFromCache", reflect.TypeOf((*MockReportCache)(nil).GetReportFromCache), userID, period)
}
