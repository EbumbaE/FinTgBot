// Code generated by MockGen. DO NOT EDIT.
// Source: internal/servers/tg/tg.go

// Package mock_tgServer is a generated GoMock package.
package mock_tgServer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	request "gitlab.ozon.dev/ivan.hom.200/telegram-bot/internal/model/request"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// SendAddNoteInCache mocks base method.
func (m *MockProducer) SendAddNoteInCache(arg0 context.Context, arg1 request.AddNoteInCacheRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAddNoteInCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAddNoteInCache indicates an expected call of SendAddNoteInCache.
func (mr *MockProducerMockRecorder) SendAddNoteInCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAddNoteInCache", reflect.TypeOf((*MockProducer)(nil).SendAddNoteInCache), arg0, arg1)
}

// SendReportRequest mocks base method.
func (m *MockProducer) SendReportRequest(arg0 context.Context, arg1 request.ReportRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReportRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReportRequest indicates an expected call of SendReportRequest.
func (mr *MockProducerMockRecorder) SendReportRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReportRequest", reflect.TypeOf((*MockProducer)(nil).SendReportRequest), arg0, arg1)
}
