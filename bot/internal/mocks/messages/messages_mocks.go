// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/model.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messages "github.com/EbumbaE/FinTgBot/bot/internal/model/messages"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockClient) SendMessage(msg messages.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockClientMockRecorder) SendMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockClient)(nil).SendMessage), msg)
}

// SetupCurrencyKeyboard mocks base method.
func (m *MockClient) SetupCurrencyKeyboard(msg *messages.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupCurrencyKeyboard", msg)
}

// SetupCurrencyKeyboard indicates an expected call of SetupCurrencyKeyboard.
func (mr *MockClientMockRecorder) SetupCurrencyKeyboard(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupCurrencyKeyboard", reflect.TypeOf((*MockClient)(nil).SetupCurrencyKeyboard), msg)
}

// MockMessanger is a mock of Messanger interface.
type MockMessanger struct {
	ctrl     *gomock.Controller
	recorder *MockMessangerMockRecorder
}

// MockMessangerMockRecorder is the mock recorder for MockMessanger.
type MockMessangerMockRecorder struct {
	mock *MockMessanger
}

// NewMockMessanger creates a new mock instance.
func NewMockMessanger(ctrl *gomock.Controller) *MockMessanger {
	mock := &MockMessanger{ctrl: ctrl}
	mock.recorder = &MockMessangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessanger) EXPECT() *MockMessangerMockRecorder {
	return m.recorder
}

// IsCurrency mocks base method.
func (m *MockMessanger) IsCurrency(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCurrency", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCurrency indicates an expected call of IsCurrency.
func (mr *MockMessangerMockRecorder) IsCurrency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCurrency", reflect.TypeOf((*MockMessanger)(nil).IsCurrency), arg0)
}

// MessageDefault mocks base method.
func (m *MockMessanger) MessageDefault(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageDefault", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageDefault indicates an expected call of MessageDefault.
func (mr *MockMessangerMockRecorder) MessageDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageDefault", reflect.TypeOf((*MockMessanger)(nil).MessageDefault), arg0, arg1)
}

// MessageSetReportCurrency mocks base method.
func (m *MockMessanger) MessageSetReportCurrency(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSetReportCurrency", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageSetReportCurrency indicates an expected call of MessageSetReportCurrency.
func (mr *MockMessangerMockRecorder) MessageSetReportCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSetReportCurrency", reflect.TypeOf((*MockMessanger)(nil).MessageSetReportCurrency), arg0, arg1)
}

// MockCommander is a mock of Commander interface.
type MockCommander struct {
	ctrl     *gomock.Controller
	recorder *MockCommanderMockRecorder
}

// MockCommanderMockRecorder is the mock recorder for MockCommander.
type MockCommanderMockRecorder struct {
	mock *MockCommander
}

// NewMockCommander creates a new mock instance.
func NewMockCommander(ctrl *gomock.Controller) *MockCommander {
	mock := &MockCommander{ctrl: ctrl}
	mock.recorder = &MockCommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommander) EXPECT() *MockCommanderMockRecorder {
	return m.recorder
}

// CommandDefault mocks base method.
func (m *MockCommander) CommandDefault(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandDefault", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandDefault indicates an expected call of CommandDefault.
func (mr *MockCommanderMockRecorder) CommandDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandDefault", reflect.TypeOf((*MockCommander)(nil).CommandDefault), arg0, arg1)
}

// CommandGetBudget mocks base method.
func (m *MockCommander) CommandGetBudget(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandGetBudget", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandGetBudget indicates an expected call of CommandGetBudget.
func (mr *MockCommanderMockRecorder) CommandGetBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandGetBudget", reflect.TypeOf((*MockCommander)(nil).CommandGetBudget), arg0, arg1)
}

// CommandGetStatistic mocks base method.
func (m *MockCommander) CommandGetStatistic(arg0 context.Context, arg1 *messages.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandGetStatistic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommandGetStatistic indicates an expected call of CommandGetStatistic.
func (mr *MockCommanderMockRecorder) CommandGetStatistic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandGetStatistic", reflect.TypeOf((*MockCommander)(nil).CommandGetStatistic), arg0, arg1)
}

// CommandSetBudget mocks base method.
func (m *MockCommander) CommandSetBudget(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandSetBudget", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandSetBudget indicates an expected call of CommandSetBudget.
func (mr *MockCommanderMockRecorder) CommandSetBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandSetBudget", reflect.TypeOf((*MockCommander)(nil).CommandSetBudget), arg0, arg1)
}

// CommandSetNote mocks base method.
func (m *MockCommander) CommandSetNote(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandSetNote", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandSetNote indicates an expected call of CommandSetNote.
func (mr *MockCommanderMockRecorder) CommandSetNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandSetNote", reflect.TypeOf((*MockCommander)(nil).CommandSetNote), arg0, arg1)
}

// CommandStart mocks base method.
func (m *MockCommander) CommandStart(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandStart", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandStart indicates an expected call of CommandStart.
func (mr *MockCommanderMockRecorder) CommandStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandStart", reflect.TypeOf((*MockCommander)(nil).CommandStart), arg0, arg1)
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// CommandDefault mocks base method.
func (m *MockServer) CommandDefault(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandDefault", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandDefault indicates an expected call of CommandDefault.
func (mr *MockServerMockRecorder) CommandDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandDefault", reflect.TypeOf((*MockServer)(nil).CommandDefault), arg0, arg1)
}

// CommandGetBudget mocks base method.
func (m *MockServer) CommandGetBudget(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandGetBudget", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandGetBudget indicates an expected call of CommandGetBudget.
func (mr *MockServerMockRecorder) CommandGetBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandGetBudget", reflect.TypeOf((*MockServer)(nil).CommandGetBudget), arg0, arg1)
}

// CommandGetStatistic mocks base method.
func (m *MockServer) CommandGetStatistic(arg0 context.Context, arg1 *messages.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandGetStatistic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommandGetStatistic indicates an expected call of CommandGetStatistic.
func (mr *MockServerMockRecorder) CommandGetStatistic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandGetStatistic", reflect.TypeOf((*MockServer)(nil).CommandGetStatistic), arg0, arg1)
}

// CommandSetBudget mocks base method.
func (m *MockServer) CommandSetBudget(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandSetBudget", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandSetBudget indicates an expected call of CommandSetBudget.
func (mr *MockServerMockRecorder) CommandSetBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandSetBudget", reflect.TypeOf((*MockServer)(nil).CommandSetBudget), arg0, arg1)
}

// CommandSetNote mocks base method.
func (m *MockServer) CommandSetNote(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandSetNote", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandSetNote indicates an expected call of CommandSetNote.
func (mr *MockServerMockRecorder) CommandSetNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandSetNote", reflect.TypeOf((*MockServer)(nil).CommandSetNote), arg0, arg1)
}

// CommandStart mocks base method.
func (m *MockServer) CommandStart(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandStart", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandStart indicates an expected call of CommandStart.
func (mr *MockServerMockRecorder) CommandStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandStart", reflect.TypeOf((*MockServer)(nil).CommandStart), arg0, arg1)
}

// IsCurrency mocks base method.
func (m *MockServer) IsCurrency(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCurrency", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCurrency indicates an expected call of IsCurrency.
func (mr *MockServerMockRecorder) IsCurrency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCurrency", reflect.TypeOf((*MockServer)(nil).IsCurrency), arg0)
}

// MessageDefault mocks base method.
func (m *MockServer) MessageDefault(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageDefault", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageDefault indicates an expected call of MessageDefault.
func (mr *MockServerMockRecorder) MessageDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageDefault", reflect.TypeOf((*MockServer)(nil).MessageDefault), arg0, arg1)
}

// MessageSetReportCurrency mocks base method.
func (m *MockServer) MessageSetReportCurrency(arg0 context.Context, arg1 *messages.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSetReportCurrency", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageSetReportCurrency indicates an expected call of MessageSetReportCurrency.
func (mr *MockServerMockRecorder) MessageSetReportCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSetReportCurrency", reflect.TypeOf((*MockServer)(nil).MessageSetReportCurrency), arg0, arg1)
}
